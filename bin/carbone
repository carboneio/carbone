#!/usr/bin/env node

var server = require('../lib/server');
var webserver = require('../lib/webserver');
var translator = require('../lib/translator');
var tool = require('../lib/tool');
var _action = process.argv[2];

switch (_action) {
  case 'server':
    server(process.argv.slice(3));
    break;
  case 'translate':
    translator.handleCLI(process.argv.slice(3));
    break;
  case 'find':
    tool.findMarkers(process.argv.slice(3));
    break;
  case 'webserver':
    webserver.handleParams(process.argv.slice(3));
    break;
  case 'install':
    installService();
    break;
  case 'generate-token':
    webserver.generateToken((err, token) => {
      if (err) {
        console.log(err.toString());
        process.exit();
      }

      console.log('Here is a JWT token, valid for 40 years. Place this token in the header like this:');
      console.log('  - Authorization : Bearer your_token\n');
      console.log(token);
      console.log('\n');
      process.exit();
    });
    break;
  default:
    usage();
}

function usage () {
  console.log('*************************************');
  console.log('Carbone usage:');
  console.log('   carbone server [--help]');
  console.log('   carbone translate [--help]');
  console.log('   carbone find [--help]');
  console.log('   carbone webserver [--help]');
  console.log('   carbone generate-token');
  console.log('   carbone install          # daeamonize carbone webserver in systemd ');
  process.exit();
}

/**
 * Install systemd service
 *
 * Only for Carbone Enterprise Edition
 */
function installService () {
  if (process.platform !== 'linux') {
    console.log('Automatic installation as a service not available yet for your OS');
    process.exit();
  }
  const spawn  = require('child_process');
  const path   = require('path');
  const fs     = require('fs');
  const params = require('../lib/params');
  const _pathScript = path.join(params.tempPath, './carbone_install.sh');
  console.log('Copying script into tmp directory', process.argv[0]);
  try {
    // copy bash script to tmp directory to execute it outside of the package
    fs.writeFileSync(_pathScript  , fs.readFileSync(path.join(__dirname, './install.sh')));
    fs.chmodSync(_pathScript, '755');
    fs.copyFileSync(path.join(__dirname, 'systemd'), ' /etc/systemd/system/carbone-ee.service', fs.constants.COPYFILE_FICLONE);
  }
  catch (e) {
    console.log('Cannot write bash script file in ' + params.tempPath);
  }
  spawn.execFileSync(_pathScript, [process.argv[0]], { encoding : 'utf8', stdio : 'inherit' });
  fs.unlinkSync(_pathScript);
}