const echarts = require('echarts');

echarts.registerLocale('CS', require('echarts/i18n/langCS-obj'));
echarts.registerLocale('DE', require('echarts/i18n/langDE-obj'));
echarts.registerLocale('EN', require('echarts/i18n/langEN-obj'));
echarts.registerLocale('ES', require('echarts/i18n/langES-obj'));
echarts.registerLocale('FI', require('echarts/i18n/langFI-obj'));
echarts.registerLocale('FR', require('echarts/i18n/langFR-obj'));
echarts.registerLocale('IT', require('echarts/i18n/langIT-obj'));
echarts.registerLocale('JA', require('echarts/i18n/langJA-obj'));
echarts.registerLocale('KO', require('echarts/i18n/langKO-obj'));
echarts.registerLocale('PL', require('echarts/i18n/langPL-obj'));
echarts.registerLocale('PT-BR', require('echarts/i18n/langPT-br-obj'));
echarts.registerLocale('RO', require('echarts/i18n/langRO-obj'));
echarts.registerLocale('RU', require('echarts/i18n/langRU-obj'));
echarts.registerLocale('SI', require('echarts/i18n/langSI-obj'));
echarts.registerLocale('TH', require('echarts/i18n/langTH-obj'));
echarts.registerLocale('ZH', require('echarts/i18n/langZH-obj'));


/**
 * Generate advanced charts using [Apache ECharts](https://echarts.apache.org/examples/en/index.html) object descriptors
 *
 * Examples of charts: https://echarts.apache.org/examples/en/index.html
 *
 * How it works?
 *  - Insert a sample image in your template.
 *  - Place a marker in alt text , like a dynamic image : `{d.chartObj:chart}` with the formatter `:chart`.
 *    The formatter `:chart` is optional if the `chartObj` object contains the attribute `"type" : "echarts@v5"`.
 *    In that case, Carbone automatically considers it is a chart object instead of a dynamic image.
 *  - `chartObj` must contains a compatible [Echarts option](https://echarts.apache.org/en/option.html) like this:
 *    {
 *      "type"   : "echarts@v5", // default
 *      "width"  : 600,          // default
 *      "height" : 400,          // default
 *      "theme"  : null,         // default or object `theme` generated by https://echarts.apache.org/en/theme-builder.html
 *      "option"   : {           // Echarts option
 *         "xAxis"  : [],
 *         "yAxis"  : [],
 *         ...
 *      }
 *    }
 *
 * Carbone now supports two versions of ECharts:
 *  - "echarts@v5": This is the default version.
 *  - "echarts@v5a": Introduced in Carbone v4.22.3, this version supports custom font styles in charts.
 *    It is a modified version of Apache ECharts, optimized for SVG compatibility with our main document converter, LibreOffice.
 *
 * Some charts have some translation: Locales supported : cs, de, en, es, fi, fr, it, ja, ko, pl, pt-br, ro, ru, si, th, zh
 *
 * Rendering charts with Apache Echarts is extremely powerful and works well if all these conditions are met
 *   - ECharts supports what you ask
 *   - LibreOffice support the rendered SVG
 *   - Your chart configuration does not need external dependencies (maps, js code, themes), which are not available in Carbone
 *
 * If you meet some limitation, please feel free to contact us on our chat to solve the issue.
 *
 * @param   {Object} data Echarts Object descriptor with "_cType" attribute
 * @returns {Object}      Object with "_cType"
 */
function chart (d) {
  // We must modify the object to keep the reference, used by imageDatabase Map
  if (typeof(d) === 'object' && d !== null) {
    d.type = 'echarts@v5';
  }
  return d;
}

/**
 * Generate ECharts SVG
 *
 * SSR: https://github.com/apache/echarts/pull/15880
 * How Echarts measure text width: https://github.com/ecomfe/zrender/pull/840/files
 *
 * if the font
 *
 * @private
 * @param   {Object}    chartData  Data
 * @param   {Object}    options    Carbone options (this)
 * @param   {Function}  callback   The callback
 * @return  {Function}  a SVG image
 */
function generateChartImage (chartData, options, callback) {
  if (chartData !== null && chartData !== undefined && typeof(chartData) === 'object' && typeof(chartData.option) === 'object' && chartData.option !== null) {
    const chartInstance = echarts.init(null, chartData?.theme, {
      renderer : 'svg', // Only SVG renderer is supported on server-side
      ssr      : true,
      width    : (chartData?.width ?? 600),
      height   : (chartData?.height ?? 400),
      locale   : _convertToEChartLocale(options.lang)
    });
    // If we want to add MAP with echarts.registerMap('flight-seats', {svg : map})
    // We will need to implement a DOMParser because echarts use DOMParser to parse the SVG
    // this implementation is OK but slow: https://github.com/ershov-konst/dom-parser#readme
    chartData.option.animation = false;
    chartInstance.hideLoading();
    let _svgImage = '';
    try {
      chartInstance.setOption(chartData.option);
      // The variable "svgId" in node_modules/echarts/dist/echarts.js is never restored to 0, even after dispose()
      // So I force ZRender with a new id each time a new chart is generated, to avoid revealing how many chart Carbone has rendered among clients.
      // Secondly, for unit test, it generate always the same SVG.
      if (chartInstance?._zr?.painter?._id) {
        chartInstance._zr.painter._id = 'zr0';
      }
      _svgImage = chartInstance.renderToSVGString();
      // Disposes instance. Once disposed, the instance cannot be used again.
      chartInstance.dispose();
    }
    catch (e) {
      // TODO data error when isDebugActive
      return callback('ECharts Error ' + e);
    }
    if (chartData.type === 'echarts@v5a') {
      // Transform font style to make it wotk in LibreOffice
      _svgImage = _convertSingleLineFontStyleSVG(_svgImage);
    }

    if (/^<svg/.test(_svgImage) === true) {
      return callback(null, {
        data      : new Buffer.from(_svgImage, 'utf-8'),
        extension : 'svg',
        mimetype  : 'image/svg+xml',
      });
    }
  }
  return callback('ECharts Error: no echarts option detected');
}


/**
 * Convert carbone locale to Echart locale
 *
 * @private
 * @param  {string}  carboneLocale  The carbone locale
 * @return {string}  echarts locale
 */
function _convertToEChartLocale (carboneLocale) {
  // carbone locale are always in lower cade
  if (carboneLocale === 'pt-br') {
    return carboneLocale.toUpperCase();
  }
  return carboneLocale?.slice(0, 2)?.toUpperCase();
}

/**
 * Convert single line font style into multiple font properties in SVG generated by ECharts
 *
 * Libreoffice ignores single-line font style!!
 *
 * Doc about single line font style: https://medium.com/swlh/full-text-styling-with-a-single-line-of-css-838e8c666f4d
 *
 * @private
 * @param    {string}  [svgString='']  The svg string
 * @return   {string}                  The SVG string with multiline font properties
 */
function _convertSingleLineFontStyleSVG (svgString = '') {
  return svgString?.replace(/style="font: ([^;"]+)/g, function (a, font) {
    const _parts = font.split(' ');
    if (_parts.length > 4) {
      _parts[3] = _parts.slice(3).join(' ');
    }
    return `style="font-style=${_parts[0]};font-weight:${_parts[1]};font-size:${_parts[2]};font-family:${_parts[3]}`;
  }) ?? '';
}

module.exports = {
  chart,
  generateChartImage,
  _convertSingleLineFontStyleSVG
};

